@*@inject HttpClient Http*@
@inject IProductService ProductService
@implements IDisposable

@if(ProductService.Products == null || ProductService.Products.Count == 0)
{
    <span>@ProductService.Message</span>
}
else
{
    <ul class="list-unstyled">
        @foreach (var product in ProductService.Products)
        {
            <li class="media my-3">
                <div class="media-img-wrapper mr-2">
                    <a href="/product/@product.Id">
                        <img class="media-img" src="@product.ImageUrl" alt="@product.Ttile" />
                    </a>
                </div>
                <div class="media-body">
                    <a href="/product/@product.Id">
                        <h4 class="mb-0">@product.Ttile</h4>
                    </a>
                    <p>@product.Description</p>
                    <h5 class="price">
                        @*$@product.Price*@
                        @GetPriceTest(product)
                    </h5>
                </div>
            </li>
        }
    </ul>
}


@code {
    // http
    //private static List<Product> Products = new List<Product>();

    // when this component is rendered at first
    // before apply invoke() event function
    //protected override async Task OnInitializedAsync()
    //{
    //    //// http
    //    //var result = await Http.GetFromJsonAsync<ServiceResponse<List<Product>>>("api/Product");
    //    //if (result != null && result.Data != null)
    //    //    Products = result.Data;

    //    // no category
    //    await ProductService.GetProducts();
    //}

    protected override void OnInitialized()
    {
        ProductService.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.ProductsChanged -= StateHasChanged;
    }

    private string GetPriceTest(Product product)
    {
        var variants = product.Variants;

        if(variants.Count == 0)
        {
            return string.Empty;
        }
        else if(variants.Count == 1)
        {
            return $"${variants[0].Price}";
        }
        decimal minPrice = variants.Min(v => v.Price);
            return $"Starting at ${minPrice}";
    }
}
