@page "/product/{id:int}"
@inject IProductService ProductService
@inject ICartService CartService

@if (product == null)
{
    <div>
        <div class="text-center pt-3" style="color: purple; font-size: 16pt">
            @message
        </div>
        <div class="text-center mt-3">
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"
              style="font-size: 16pt; width: 36px; height: 36px; color: purple" />
        </div>
        <div class="text-center">
            <img src="/images/blazor-logo.png" style=" width: 5%;" />
        </div>
    </div>
}
else
{
    <div class="media">
        <div class="media-img-wrapper mr-2">
            <img class="media-img" src="@product.ImageUrl" alt="@product.Title" />
        </div>
        <div class="media-body">
            <h2 class="mb-0">@product.Title</h2>
            <p>@product.Description</p>
            @if (product.Variants != null && product.Variants.Count > 1)
            {
                <div class="mb-3">
                    <select class="form-select" @bind="currentTypeId">
                        @foreach (var variant in product.Variants)
                        {
                            <option value="@variant.ProductTypeId">@variant.ProductType.Name</option>
                        }
                    </select>
                </div>
            }
            @if (@GetSelectedVariant() != null)
            {
                if (@GetSelectedVariant().OriginalPrice > GetSelectedVariant().Price)
                {
                    <h6 class="text-muted original-price">
                        $@GetSelectedVariant().OriginalPrice
                    </h6>
                }
                <h4 class="price">
                    @*$@product.Price *@
                    $@GetSelectedVariant().Price
                </h4>
            }

            <button class="btn btn-primary" @onclick="AddToCart">
                <i class="oi oi-cart"></i>&nbsp;&nbsp;&nbsp;Add to Cart
            </button>
        </div>
    </div>
}

@code {
    private Product? product = null;
    private string message;
    private int currentTypeId = 1;


    [Parameter]
    public int Id { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        //product = ProductService.Products.Find(p => p.Id == Id);

        message = "Loading Product...";

        var result = await ProductService.GetProduct(Id);

        if (!result.Success)
        {
            message = result.Message;
        }
        else
        {
            product = result.Data;
            if (product.Variants.Count > 0)
            {
                currentTypeId = product.Variants[0].ProductTypeId;
            }
        }
    }

    private ProductVariant GetSelectedVariant()
    {
        var variant = product.Variants.FirstOrDefault(v => v.ProductTypeId == currentTypeId);
        return variant;
    }

    private async Task AddToCart()
    {
        var productVariant = GetSelectedVariant();
        var cartItem = new CartItem
            {
                ProductId = productVariant.ProductId,
                ProductTypeId = productVariant.ProductTypeId
            };

        await CartService.AddToCart(cartItem);
    }
}