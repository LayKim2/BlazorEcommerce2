@page "/cart"
@inject ICartService CartService
@inject IOrderService OrderService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Shopping Cart</PageTitle>

<h3>Shopping cart</h3>

@if (CartProducts == null || CartProducts.Count == 0)
{
    <span>@message</span>
} 
@*else if (orderPalced)
{
    <span>Thank you for your order! you can check your orders <a href="orders">here</a></span>
}*@
else
{
    <div>
        @foreach (var product in CartProducts)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@product.ImageUrl" class="image" />
                </div>
                <div class="name">
                    <h5><a href="/product/@product.ProductId">@product.Title</a></h5>
                    <span>@product.ProductType</span><br />
                    <input type="number" value="@product.Quantity"
                   @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, product))"
                   class="form-control input-quantity"
                   min="1" />
                    <button class="btn-delete" @onclick="@(() =>
                        RemoveProductFromCart(product.ProductId, product.ProductTypeId))">
                        Delete
                    </button>
                </div>
                <div class="cart-product-price">$(@(product.Price * product.Quantity))</div>
            </div>
        }
        <div class="cart-product-price">
            Total (@CartProducts.Count): $@CartProducts.Sum(product => product.Price * product.Quantity)
        </div>
    </div>
    @if (isAuthenticated)
    {
        <div>
            <h5>Delivery Address</h5>
            <AddressForm />
        </div>
    }
    <button @onclick="PlaceOrder" class="btn alert-success float-end mt-1">Checkout</button>
}

@code {
    List<CartProductResponse> CartProducts = null;
    //bool orderPalced = false;
    string message = "Loading cart...";
    bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        //orderPalced = false;
        await LoadCart();
        isAuthenticated = await AuthService.IsUserAuthenticated();
    }

    private async Task RemoveProductFromCart(int productId, int productTypeId)
    {
        await CartService.RemoveProductFromCart(productId, productTypeId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        await CartService.GetCartItemsCount();
        CartProducts = await CartService.GetCartProducts();

        if(CartProducts == null || CartProducts.Count == 0)
        {
            message = "Your cart is Empty.";
        }

        //if ((await CartService.GetCartProducts()).Count == 0)
        //{
        //    message = "Your cart is Empty.";
        //    CartProducts = new List<CartProductResponse>();
        //}
        //else
        //{
        //    CartProducts = await CartService.GetCartProducts();
        //}
    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponse product)
    {
        product.Quantity = int.Parse(e.Value.ToString());
        if (product.Quantity < 1)
            product.Quantity = 1;
        await CartService.UpdateQuantity(product);
    }

    //private async Task PlaceOrder()
    //{
    //    await OrderService.PlaceOrder();
    //    await CartService.GetCartItemsCount();
    //    orderPalced = true;
    //}

    private async Task PlaceOrder()
    {
        string url = await OrderService.PlaceOrder();
        NavigationManager.NavigateTo(url);
    }
}
